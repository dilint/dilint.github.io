<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Wells Blog</title>
    <link>https://dilint.github.io/posts/</link>
    <description>Recent content in Posts on Wells Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Jan 2024 17:57:04 +0800</lastBuildDate><atom:link href="https://dilint.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode Array</title>
      <link>https://dilint.github.io/posts/leetcode_array/</link>
      <pubDate>Sun, 07 Jan 2024 17:57:04 +0800</pubDate>
      
      <guid>https://dilint.github.io/posts/leetcode_array/</guid>
      <description>Leetcode Array 目录 二分 收敛位置证明 leetcode35 二分 Template
# 左闭右开 def search(self, nums: List[int], target: int) -&amp;gt; int: left, right = 0, len(nums) while left &amp;lt; right: mid = left + (right - left) // 2 if nums[mid] &amp;gt; target: right = mid elif nums[mid] &amp;lt; target: left = mid + 1 else: return mid return -1 # 左闭右闭 def search(self, nums: List[int], target: int) -&amp;gt; int: left , right = 0, len(nums) - 1 while left &amp;lt;= right: mid = left + (right - left) // 2 if nums[mid] &amp;gt; target: right = mid - 1 elif nums[mid] &amp;lt; target: left = mid + 1 else: return mid return -1 收敛位置证明 leetcode35 leetcode35.</description>
    </item>
    
    <item>
      <title>Set Up Docker</title>
      <link>https://dilint.github.io/posts/set_up_docker/</link>
      <pubDate>Fri, 22 Sep 2023 21:00:30 +0800</pubDate>
      
      <guid>https://dilint.github.io/posts/set_up_docker/</guid>
      <description>个人第一次使用经过：在有基本的容器原理前提下，windows安装后 根据 Flask+Docker 一文尝试未果（命令、墙），然后配置了阿里镜像，看了 命令入门视频,linux安装后部署上最基本web后端（fastapi）。
使用概览 初级 Flask+Docker 1 FastApi+Docker
使用过程 安装 Windows linux
配置国内镜像 国内镜像地址2
阿里云配置指南
阿里云仓库使用 仓库地址
pull push
命令 入门视频 3入门文档 详细介绍 docker-compose实例 删除容器
运行 docker run -p 8000:8000 -t 进入终端 $ sudo docker ps $ sudo docker exec -it 775c7c9ee1e1 /bin/bash 后续使用遇到的问题 命令 docker ps 查看当前运行中的容器 docker images 查看镜像列表 docker rm container-id 删除指定 id 的容器 docker stop/start container-id 停止/启动指定 id 的容器 docker rmi image-id 删除指定 id 的镜像 docker volume ls 查看 volume 列表 docker network ls 查看网络列表 sudo docker exec -it container-id /bin/bash 进入容器 Mysql 设置密码 Mysql 常用命令</description>
    </item>
    
    <item>
      <title>CSAPP LAB</title>
      <link>https://dilint.github.io/posts/csapp_lab/</link>
      <pubDate>Fri, 22 Sep 2023 17:26:42 +0800</pubDate>
      
      <guid>https://dilint.github.io/posts/csapp_lab/</guid>
      <description>DataLab - howmanybits 题目 用有限的运算符（逻辑运算、移位运算等）实现功能：表示输入x所需要的最少bit位数。例：f(12)=5，f(-1)=1。
/*howManyBits - return the minimum number of bits required to represent x in tow&amp;#39;s complement * Examples: howManyBits(12) = 5 * howManyBits(296) = 10 * howManyBits(-5) = 4 * howManyBits(0) = 1 * howManyBits(0x80000000) = 32 * Legal ops: ! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt; * Max ops: 90 */ int howManyBits(int x){ } 分析 可能有更好的方法，本方法仅为一种解决方案。 首先分为补码 正负分析，然后考虑边界情况。
一般情况分析 先用变量minus来记录补码的正负，int类型共有32位，如果第31位为0说明是非负，否则为负数。
非负情况：当补码为非负时，需要找出数中从大到小第一个为1的位置pos(0-31)。再添加上一位符号位即可。（由于索引范围为0-31，而个数范围为1-32，最后pos需要+1，最高位1在第pos位指的是共有(pos+1)bits）。
负数情况：当补码为负时，将x转换为相反数-x(tmin=-0x80000000有越界风险需要另外讨论)，同样寻找相反数|x|中从大到小第一个为1的位置pos，观察例子f(-5)的绝对值2进制形式为101，3个bits但结果为4需要添加1；f(-1)绝对值2进制形式为1，1个bit结果为1不需要添加1。思考这是由于n位补码的表示范围为$[-2^{ n-1},2^{n-1}-1]$，补码中负数与绝对值的无符号代数关系为： $$x+|x|=2^n$$①当$|x|=2^{pos}$时，假设$n=pos+1$，x刚好为能表达的最小数，$x=2^{pos}$,$x+|x|=2^{pos+1}$式子刚好满足； ②而当$|x|&amp;gt;2^{pos}$，根据补码的特性可知在x中在pos之前的位拥有一个符号位1，则假设$n=pos+1$，$x+|x|&amp;gt;2^{pos+1}=2^{n}$不成立，所以假设$n=pos+2$，pos+1存在一个符号位，$x+|x|=2^{n}$，则该补码的表示范围在$[-2^{ pos+1},2^{pos+1}-1]$，$|x|&amp;lt;2^{pos+1}，x&amp;gt;-2^{pos+1}$在范围内，所以可以表示； 使用变量flag对①和②情况进行区分。</description>
    </item>
    
    <item>
      <title>Missing Semester Assignment</title>
      <link>https://dilint.github.io/posts/missing_semester_assignment/</link>
      <pubDate>Fri, 22 Sep 2023 16:53:36 +0800</pubDate>
      
      <guid>https://dilint.github.io/posts/missing_semester_assignment/</guid>
      <description>Sheel Tools https://missing.csail.mit.edu/2020/shell-tools/
Q1 Question Read man ls and write an ls command that lists files in the following manner
Includes all files, including hidden files Sizes are listed in human readable format (e.g. 454M instead of 454279954) Files are ordered by recency Output is colorized A sample output would look like this
drwxr-xr-x 5 user group 160 Jan 14 09:53 . -rw-r--r-- 1 user group 514 Jan 14 06:42 bar -rw-r--r-- 1 user group 106M Jan 13 12:12 foo drwx------+ 47 user group 1.</description>
    </item>
    
    <item>
      <title>Set Up Blog</title>
      <link>https://dilint.github.io/posts/set_up_blog/</link>
      <pubDate>Wed, 20 Sep 2023 13:21:45 +0800</pubDate>
      
      <guid>https://dilint.github.io/posts/set_up_blog/</guid>
      <description>系统：win11
参考内容：
hugo + GitHub Page(win11) hugo + GitHub Page(mac) &amp;ndash;codesheep win10结尾crlf是否替代为linux结尾lf 添加数学公式 阿里云图床设置 目录 原理 日常使用 参数说明 原理 Hugo Hugo 是一个用 Go 编写的静态网站生成器
Hugo把用户提供的数据文件、i18n 包、配置、布局模板、静态文件，以及用 Markdown 编写的内容，处理并生成一个完整的静态网站。较出色的功能包括多语言支持、图像处理、定制输出格式、短代码等等。而 Hugo 的“嵌套分部”(Nested sections) 功能则可以隔离不同类型的内容，例如一个同时包含博客和播客的网站。
&amp;mdash;&amp;mdash;&amp;ndash;wikipedia
个人使用上，就是把markdown转换为一个html。把各个html安装目录组织成目录html。
Github page Github page会把目录下的html以静态页面的方式显示出来，在这个应用场景下我们通过hugo框架将markdown转换为html，并生成相应的目录结构，所有生成的html在docs目录下，在github repository的settings -&amp;gt; Pages中，把GitHub Pages Source改为docs目录，点击save保存即可。
日常使用 根目录执行 hugo new &amp;#34;posts/hello.md&amp;#34; hugo new &amp;#34;about/_index.md&amp;#34; 本地运行 本地打开http://localhost:1313/,其中-D参数表示看到文件中&amp;amp;draft=true&amp;amp;的内容 hugo server -D 生成发布目录 hugo -t m10c 发布到github git add . git commit -m &amp;#34;...&amp;#34; git push 参数说明 draft : 是否是草稿，默认是true，草稿在发布时不会显示出来，可以通过加上hugo server -D参数来显示草稿 math: 是否支持数学公式，默认是false tags: 标签，多个标签之间用逗号分隔 </description>
    </item>
    
  </channel>
</rss>
